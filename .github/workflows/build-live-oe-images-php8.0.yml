name: Publish OE Docker images (PHP8.0)

## Builds deployable images for the OE application.
## For production scenarios, always try to tag the repo, which will create a tagged image
## Tags should use semantic versioning (major.minor.patch - e.g, v4.1.0)
## Note that the following special image tags are created:
  ## - v<major> (always up-to-date with the latest minor and patch version for the relevant major version)
  ## - v<major.<minor> (always up-todate with the latest patch version for the relevant minor release)
##
## Continuously up-to-date images are also built for the following branches - but these are not recommended for production deployment
  ## - "master"
  ## - "main"
  ## - "develop"
  ## - "release/*"
  ## - "bugfix/*"
##
## The 'latest' tag is applied to master branch image. Again, this should never be used in production

on:
  # This is triggered from a dispatch by the openeyes/openeyes repo
  repository_dispatch:
    types: [build-oe-image_php8.0_*]
  workflow_dispatch:

env:
  PRIMARY_PHP_VERSION: "8.0"
  DOCKER_ORG: "toukanlabsdocker"
  DOCKER_WEB_IMAGE: "oe-web-live"
  DOCKER_MANAGER_IMAGE: "oe-manager"
  IMAGE_SUFFIX: ""
  # The next 2 come from the dispatch action, which uses rlespinasse/github-slug-action to generate the refs
  GITHUB_REF_SLUG: ${{ github.event.client_payload.message.GITHUB_REF_SLUG }}
  GITHUB_REF_NAME: ${{ github.event.client_payload.message.GITHUB_REF_NAME }}
  REF_SLUG_NO_V: ""

jobs:
  build_and_push_to_registry:
    if: ${{ github.event.client_payload.message.GITHUB_REF_NAME }} != ""
    name: Build and push production images
    runs-on: ubuntu-latest
      
    strategy:
      fail-fast: false 
      matrix:
        ## Setup the differnt build jobs. These can specify: 
        #   - a special client build ONLY WHEN A SPECIFIC CLIENT REQUIRES ADDITIONAL CUSTOM MODULES
        #        - In which case, "modules" should be specified as a comma separated string, and can include
        #          class namespacing in the format <module>=<class>
        #   - a diffenerent PHP version
        include:
          - client-suffix: ''
            modules: ''
            php-version: "8.0"
            os-version: "jammy"
            experimental: false
          - client-suffix: 'meh'
            # modules: 'OphLeEpatientletter,OphInMehPac,mehstaffdb,OphInCocoa=\OEModule\OphInCocoa\OphInCocoaModule'
            modules: 'OphLeEpatientletter,mehstaffdb,OphInMehPac'
            php-version: "8.0"
            os-version: "focal"
            experimental: false
          - client-suffix: 'newmedica'
            modules: 'NewMedica'
            php-version: "8.0"
            os-version: "jammy"
            experimental: false
          
    continue-on-error: ${{ matrix.experimental }}

    steps:
      
      - name: Checkout OEBuilder
        uses: actions/checkout@v4
        with:
          repository: ToukanLabs/OEImageBuilder
          ref: master
          ssh-key: ${{ secrets.TKL_DEPLOY_PRIVATE_KEY }}

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
            ssh-private-key: ${{ secrets.TKL_DEPLOY_PRIVATE_KEY }}

      - name: Setup image suffix
        id: setsuffix
        shell: bash
        run: |
          if [ -n "$CLIENT_SUFFIX" ] || [ -n "$PHP_VERSION" ]; then       
            # Set client prefix if specified
            [ -n "$CLIENT_SUFFIX" ] && IMAGE_SUFFIX="$IMAGE_SUFFIX-$CLIENT_SUFFIX" || :
            
            # set php version prefix if specified. Do not set a prefix if this is the primary version
            [[ -n "$PHP_VERSION" && "$PHP_VERSION" != "$PRIMARY_PHP_VERSION" ]] && IMAGE_SUFFIX="$IMAGE_SUFFIX-php$PHP_VERSION" || :
            
            if [ -n "$IMAGE_SUFFIX" ]; then
              echo "{hassuffix}=${{ toJSON(true) }}" >> $GITHUB_OUTPUT
              echo "IMAGE_SUFFIX=${IMAGE_SUFFIX}" >> $GITHUB_ENV
              echo "IMAGE_SUFFIX set to: ${IMAGE_SUFFIX}"
            else
              echo "{hassuffix}=${{ toJSON(false) }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "{hassuffix}=${{ toJSON(false) }}" >> $GITHUB_OUTPUT
          fi
        env:
          CLIENT_SUFFIX: ${{ matrix.client-suffix }}
          PHP_VERSION: ${{ matrix.php-version }}
          OS_VERSION: ${{ matrix.os-version }}
          IMAGE_SUFFIX: ${{ env.IMAGE_SUFFIX }}
          PRIMARY_PHP_VERSION: ${{ env.PRIMARY_PHP_VERSION }}
          GITHUB_REF_SLUG: ${{ env.GITHUB_REF_SLUG }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # driver: docker is required to allow images to be reused by subsequent steps
          driver: docker

########### Setup tags for each image

      - name: Setup metadata for live image tags
        id: meta-live
        uses: toukanlabs/build-tag-gen@v3
        with:
          image-name: ${{ env.DOCKER_ORG }}/${{ env.DOCKER_WEB_IMAGE }}
          slug: ${{ env.GITHUB_REF_SLUG }}
          suffix: ${{ env.IMAGE_SUFFIX }}
          docker-user: ${{ secrets.DOCKER_USERNAME }}
          docker-pass: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup metadata for Manager image tags
        id: meta-dbboot
        uses: toukanlabs/build-tag-gen@v3
        with:
          image-name: ${{ env.DOCKER_ORG }}/${{ env.DOCKER_MANAGER_IMAGE }}
          slug: ${{ env.GITHUB_REF_SLUG }}
          suffix: ${{ env.IMAGE_SUFFIX }}
          docker-user: ${{ secrets.DOCKER_USERNAME }}
          docker-pass: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup metadata for Debug image tags
        id: meta-debug
        uses: toukanlabs/build-tag-gen@v3
        with:
          image-name: ${{ env.DOCKER_ORG }}/${{ env.DOCKER_WEB_IMAGE }}
          slug: ${{ env.GITHUB_REF_SLUG }}
          suffix: ${{ env.IMAGE_SUFFIX }}
          prefix: "debug-"
          docker-user: ${{ secrets.DOCKER_USERNAME }}
          docker-pass: ${{ secrets.DOCKER_PASSWORD }}

################
# Build images #
################
      # LIVE
      - name: Build LIVE image
        uses: docker/build-push-action@v5
        with:
          ssh: |
              default=${{ env.SSH_AUTH_SOCK }}
          context: ./Web-Live
          push: false
          build-args: |
            BUILD_BRANCH=${{ env.GITHUB_REF_NAME }}
            MODULES=${{ matrix.modules }}
            PHP_VERSION=${{ matrix.php-version }}
            OS_VERSION=${{ matrix.os-version }}
            OE_VERSION=${{ steps.meta-live.outputs.slug }}${{ env.IMAGE_SUFFIX }}
          tags: ${{ steps.meta-live.outputs.tags }}
      # Manager
      - name: Build Manager image
        uses: docker/build-push-action@v5
        with:
          ssh: |
              default=${{ env.SSH_AUTH_SOCK }}
          context: ./Manager
          push: false
          build-args: | # Note that OE_VERSION must use a 'slug' format, not GITHUB_REF_NAME, becuse /'s get converted to -'s
            BUILD_BRANCH=${{ env.GITHUB_REF_NAME }}
            MODULES=${{ matrix.modules }}
            OE_VERSION=${{ steps.meta-dbboot.outputs.slug }}${{ env.IMAGE_SUFFIX }}
            BASEIMAGE=${{ env.DOCKER_ORG }}/${{ env.DOCKER_WEB_IMAGE }}
            PHP_VERSION=${{ matrix.php-version }}
            OS_VERSION=${{ matrix.os-version }}
          tags: ${{ steps.meta-dbboot.outputs.tags }}
          
      # DEBUG
        # (Debug images contain the same code as the live image, but include additional debugging tools and run in dev mode)
      - name: Build DEBUG image
        uses: docker/build-push-action@v5
        with:
          ssh: |
              default=${{ env.SSH_AUTH_SOCK }}
          context: ./Web-Dev
          push: false
          # Note that BASE_IMAGE_TAG must use use a 'slug' format, not GITHUB_REF_NAME, becuse /'s get converted to -'s
          # PROD_DEBUG=true tells the dockerfile to build a debug image rather than a blank development image
          build-args: | 
            BUILD_BRANCH=${{ env.GITHUB_REF_NAME }}
            BASE_IMAGE_NAME=${{ env.DOCKER_ORG }}/${{ env.DOCKER_WEB_IMAGE }}
            BASE_IMAGE_TAG=${{ steps.meta-debug.outputs.slug }}${{ env.IMAGE_SUFFIX }}
            OE_VERSION=debug-${{ steps.meta-debug.outputs.slug }}${{ env.IMAGE_SUFFIX }}
            PHP_VERSION=${{ matrix.php-version }}
            OS_VERSION=${{ matrix.os-version }}
            CYPRESS_VERSION=
            PROD_DEBUG=TRUE
          tags: ${{ steps.meta-debug.outputs.tags }}
          

######################################## 
# Push final images to docker registry #
########################################

      # LIVE
      - name: Push Live image
        uses: docker/build-push-action@v5
        with:
          ssh: |
              default=${{ env.SSH_AUTH_SOCK }}
          context: ./Web-Live
          push: true
          build-args: |
            BUILD_BRANCH=${{ env.GITHUB_REF_NAME }}
            MODULES=${{ matrix.modules }}
            PHP_VERSION=${{ matrix.php-version }}
            OS_VERSION=${{ matrix.os-version }}
            OE_VERSION=${{ steps.meta-live.outputs.slug }}${{ env.IMAGE_SUFFIX }}
          tags: ${{ steps.meta-live.outputs.tags }}

      # Manager
      - name: Push Manager image
        uses: docker/build-push-action@v5
        with:
          ssh: |
              default=${{ env.SSH_AUTH_SOCK }}
          context: ./Manager
          push: true
          build-args: | # Note that OE_VERSION must use a 'slug' format, not GITHUB_REF_NAME, becuse /'s get converted to -'s
            BUILD_BRANCH=${{ env.GITHUB_REF_NAME }}
            MODULES=${{ matrix.modules }}
            OE_VERSION=${{ steps.meta-dbboot.outputs.slug }}${{ env.IMAGE_SUFFIX }}
            BASEIMAGE=${{ env.DOCKER_ORG }}/${{ env.DOCKER_WEB_IMAGE }}
            PHP_VERSION=${{ matrix.php-version }}
            OS_VERSION=${{ matrix.os-version }}
          tags: ${{ steps.meta-dbboot.outputs.tags }}
          

      - name: Push DEBUG image
        uses: docker/build-push-action@v5
        with:
          ssh: |
              default=${{ env.SSH_AUTH_SOCK }}
          context: ./Web-Dev
          push: true
          # Note that BASE_IMAGE_TAG must use use a 'slug' format, not GITHUB_REF_NAME, becuse /'s get converted to -'s
          # PROD_DEBUG=true tells the dockerfile to build a debug image rather than a blank development image
          build-args: | 
            BUILD_BRANCH=${{ env.GITHUB_REF_NAME }}
            BASE_IMAGE_NAME=${{ env.DOCKER_ORG }}/${{ env.DOCKER_WEB_IMAGE }}
            BASE_IMAGE_TAG=${{ steps.meta-debug.outputs.slug }}${{ env.IMAGE_SUFFIX }}
            OE_VERSION=debug-${{ steps.meta-debug.outputs.slug }}${{ env.IMAGE_SUFFIX }}
            PHP_VERSION=${{ matrix.php-version }}
            OS_VERSION=${{ matrix.os-version }}
            CYPRESS_VERSION=
            PROD_DEBUG=TRUE
          tags: ${{ steps.meta-debug.outputs.tags }}
          
